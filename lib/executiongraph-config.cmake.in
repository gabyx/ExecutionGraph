# - Find ExecutionGraph Installation
#
# Users can set the following variables before calling the module:
# ExecutionGraph_DIR - The preferred installation prefix for searching for ExecutionGraph. Set by the user.
#
# ExecutionGraph_CXX_FLAGS - extra flags for compilation
# ExecutionGraph_INCLUDE_DIRS - include directories
# ExecutionGraph_LIBRARY_REL  - Release library
# ExecutionGraph_LIBRARY_DGB  - Debug library
# ExecutionGraph_LIBRARIES - libraries to link with
# ExecutionGraph_COMPILE_DEFINITIONS - compile definitions which should be
# added to your target, they only define some macros for safety checks when including headers.
# ExecutionGraph_COMPILE_OPTIONS_DBG - compile options which should be added to your target


macro(make_library_set PREFIX)
  if (${PREFIX}_FWK)
    set(${PREFIX} ${${PREFIX}_FWK})
  elseif (${PREFIX}_REL AND ${PREFIX}_DBG)
    set(${PREFIX} optimized ${${PREFIX}_REL} debug ${${PREFIX}_DBG})
  elseif (${PREFIX}_REL)
    set(${PREFIX} ${${PREFIX}_REL})
  elseif (${PREFIX}_DBG)
    set(${PREFIX} ${${PREFIX}_DBG})
  endif()
endmacro(make_library_set)


macro(findpkg_finish PREFIX)
  # skip if already processed during this run
  if (NOT ${PREFIX}_FOUND)
    if ( (NOT "${ARGV1}") AND ${PREFIX}_INCLUDE_DIR AND ${PREFIX}_LIBRARY)
      set(${PREFIX}_FOUND TRUE )
      set(${PREFIX}_INCLUDE_DIRS ${${PREFIX}_INCLUDE_DIR})
      set(${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARY}  )
      if (NOT ${PREFIX}_FIND_QUIETLY)
        message(STATUS "Found ${PREFIX}")
      endif ()
    elseif ( "${ARGV1}" AND ${PREFIX}_INCLUDE_DIR)
      set(${PREFIX}_FOUND TRUE)
      set(${PREFIX}_INCLUDE_DIRS ${${PREFIX}_INCLUDE_DIR} )
      set(${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARY} )
      if (NOT ${PREFIX}_FIND_QUIETLY)
        message(STATUS "Found ${PREFIX}: No Library, only Headers")
      endif ()
    else ()
      if (NOT ${PREFIX}_FIND_QUIETLY)
        message(STATUS "Could not locate ${PREFIX}")
      endif ()
      if (${PREFIX}_FIND_REQUIRED)
        message(FATAL_ERROR "Required library ${PREFIX} not found! Install the library (including dev packages) and try again. If the library is already installed, set the missing variables manually in cmake.")
      endif ()
    endif ()

    # add dependency libraries
    if (${PREFIX}_LIBRARIES_DEP)
        list(APPEND ${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARIES_DEP})
    endif()
  endif ()
endmacro(findpkg_finish)

#Find Include Headers
find_path(ExecutionGraph_INCLUDE_DIR NAMES "@ExecutionGraph_INCLUDE_CHARATERISTIC_HEADER@" HINTS @ExecutionGraph_INC_INSTALL_DIR@ ${ExecutionGraph_DIR})
message(STATUS "ExecutionGraph include dir:  " ${ExecutionGraph_INCLUDE_DIR})

#Find libraries in @ExecutionGraph_LIBRARY_INSTALL_PATH@
find_library(ExecutionGraph_LIBRARY_REL NAMES "@ExecutionGraph_LIBRARY_NAME_REL@" HINTS @ExecutionGraph_LIB_INSTALL_DIR@ ${ExecutionGraph_DIR} NO_DEFAULT_PATH)
find_library(ExecutionGraph_LIBRARY_DBG NAMES "@ExecutionGraph_LIBRARY_NAME_DBG@" HINTS @ExecutionGraph_LIB_INSTALL_DIR@ ${ExecutionGraph_DIR} NO_DEFAULT_PATH)
message(STATUS "ExecutionGraph found (release lib): " ${ExecutionGraph_LIBRARY_REL})
message(STATUS "ExecutionGraph found (debug lib): " ${ExecutionGraph_LIBRARY_DBG})



# find dependecies Eigen3, meta and pugiXMl
# ========================================================================================================================================
SET(OLD_PATH ${CMAKE_MODULE_PATH})
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})
message(STATUS "Changed path temporarly to: " ${CMAKE_MODULE_PATH})
message(STATUS "Try finding Eigen3")
# Define Eigen =====================
find_package(Eigen3 REQUIRED)
set(EIGEN_INCLUDE_DIR ${EIGEN3_INCLUDE_DIR})
list(APPEND ExecutionGraph_INCLUDE_DIR ${EIGEN_INCLUDE_DIR})
# ==================================

message(STATUS "Try finding Meta")
find_package(Meta REQUIRED)
LIST(APPEND ExecutionGraph_INCLUDE_DIR ${Meta_INCLUDE_DIR})
SET(ExecutionGraph_DEPENDING_TARGETS ${Meta_TARGET})

message(STATUS "Try finding pugixml")
FIND_PACKAGE(PugiXML REQUIRED )
LIST(APPEND ExecutionGraph_INCLUDE_DIR   ${PUGIXML_INCLUDE_DIR} )
LIST(APPEND ExecutionGraph_LIBRARIES_DEP ${PUGIXML_LIBRARIES})

set(ExecutionGraph_COMPILE_OPTIONS "-std=c++17")

message(STATUS "ExecutionGraph: add compile definitions '\${ExecutionGraph_COMPILE_DEFINITIONS}' = '${ExecutionGraph_COMPILE_DEFINITIONS}' to your target.")
message(STATUS "ExecutionGraph: add compile options '\${ExecutionGraph_COMPILE_OPTIONS}' = '${ExecutionGraph_COMPILE_OPTIONS}' to your target.")
message(STATUS "ExecutionGraph: add debug compile options '\${ExecutionGraph_COMPILE_OPTIONS_DBG}' = '${ExecutionGraph_COMPILE_OPTIONS_DBG}' to your target.")
# ========================================================================================================================================

SET(CMAKE_MODULE_PATH ${OLD_PATH})

make_library_set(ExecutionGraph_LIBRARY)
findpkg_finish(ExecutionGraph)

include(FindPackageHandleStandardArgs)
## handle the QUIETLY and REQUIRED arguments
## if all listed variables are TRUE
find_package_handle_standard_args(ExecutionGraph DEFAULT_MSG ExecutionGraph_LIBRARIES ExecutionGraph_INCLUDE_DIR)

MARK_AS_ADVANCED(
    ExecutionGraph_CXX_FLAGS
    ExecutionGraph_INCLUDE_DIRS
    ExecutionGraph_LIBRARY_REL
    ExecutionGraph_LIBRARY_DBG
    ExecutionGraph_LIBRARIES
    ExecutionGraph_DEPENDING_TARGETS
    ExecutionGraph_COMPILE_OPTIONS
    ExecutionGraph_COMPILE_OPTIONS_DBG
    ExecutionGraph_COMPILE_DEFINITIONS
)
